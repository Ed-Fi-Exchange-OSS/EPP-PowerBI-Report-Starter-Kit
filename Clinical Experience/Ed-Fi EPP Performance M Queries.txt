---CANDIDATE
let
	Source = Sql.Database(".", "EdFi_Ods_Populated_Sandbox", [Query="--CANDIDATE #(lf)SELECT c.CandidateIdentifier #(lf)#(tab)#(tab),c.FirstName #(lf)#(tab)#(tab),c.LastSurname #(lf)#(tab)#(tab),c.SexDescriptorId #(lf)#(tab)#(tab),rd.RaceDescriptorId #(lf)#(tab)#(tab),c.HispanicLatinoEthnicity #(lf)#(tab)#(tab),c.EconomicDisadvantaged #(lf)#(tab)#(tab),ccy.SchoolYear as Cohort #(lf)#(tab)#(tab),c.ProgramComplete #(lf)#(tab)#(tab),s.StudentUSI #(lf)#(tab)#(tab),epp.ProgramName #(lf)#(tab)#(tab),epp.BeginDate #(lf)#(tab)#(tab),epp.EducationOrganizationId #(lf)#(tab)#(tab),c.PersonId #(lf)#(tab)#(tab),CASE WHEN SUM(CASE WHEN cred.CredentialIdentifier IS NOT NULL THEN 1 ELSE 0 END) > 0 THEN MIN(cred.IssuanceDate) END IssuanceDate#(lf)#(tab)FROM tpdm.Candidate c #(lf)#(tab)JOIN tpdm.CandidateEducatorPreparationProgramAssociation epp on epp.CandidateIdentifier = c.CandidateIdentifier #(lf)#(tab)LEFT JOIN tpdm.CandidateRace rd on rd.CandidateIdentifier = c.CandidateIdentifier #(lf)#(tab)LEFT JOIN edfi.Descriptor d on d.DescriptorId = rd.RaceDescriptorId #(lf)#(tab)LEFT JOIN edfi.Student s on s.PersonId = c.PersonId #(lf)#(tab)LEFT JOIN tpdm.CandidateCohortYear ccy on ccy.CandidateIdentifier = c.CandidateIdentifier#(lf)#(tab)LEFT JOIN tpdm.CredentialExtension ce on ce.PersonId = c.PersonId #(lf)#(tab)LEFT JOIN edfi.Credential cred on cred.CredentialIdentifier = ce.CredentialIdentifier#(lf)#(tab)GROUP BY c.CandidateIdentifier #(lf)#(tab)#(tab),c.FirstName #(lf)#(tab)#(tab),c.LastSurname #(lf)#(tab)#(tab),c.SexDescriptorId #(lf)#(tab)#(tab),rd.RaceDescriptorId #(lf)#(tab)#(tab),c.HispanicLatinoEthnicity #(lf)#(tab)#(tab),c.EconomicDisadvantaged #(lf)#(tab)#(tab),ccy.SchoolYear#(lf)#(tab)#(tab),c.ProgramComplete #(lf)#(tab)#(tab),s.StudentUSI #(lf)#(tab)#(tab),epp.ProgramName #(lf)#(tab)#(tab),epp.BeginDate #(lf)#(tab)#(tab),epp.EducationOrganizationId #(lf)#(tab)#(tab),c.PersonId"]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"CandidateIdentifier", Text.Type}, {"RaceDescriptorId", Int64.Type}, {"Cohort", type text}}),
    #"Replaced Value" = Table.ReplaceValue(#"Changed Type",null,1831,Replacer.ReplaceValue,{"RaceDescriptorId"}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Replaced Value",{{"Cohort", Int64.Type}}),
    #"Added Conditional Column" = Table.AddColumn(#"Changed Type1", "Cohort Sort", each if [Cohort] = null then 1 else if [Cohort] = 2014 then 2 else if [Cohort] = 2015 then 3 else if [Cohort] = 2016 then 4 else if [Cohort] = 2017 then 5 else if [Cohort] = 2018 then 6 else if [Cohort] = 2019 then 7 else null),
    #"Changed Type2" = Table.TransformColumnTypes(#"Added Conditional Column",{{"Cohort Sort", Int64.Type}, {"ProgramComplete", type text}}),
    #"Added Conditional Column2" = Table.AddColumn(#"Changed Type2", "Credentialed", each if [IssuanceDate] <> null then "Certified" else "Not Certified"),
    #"Replaced Value3" = Table.ReplaceValue(#"Added Conditional Column2","true","Complete",Replacer.ReplaceValue,{"ProgramComplete"}),
    #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","false","Incomplete",Replacer.ReplaceValue,{"ProgramComplete"}),
    #"Added Conditional Column1" = Table.AddColumn(#"Replaced Value4", "ProgramNameSort", each if Text.StartsWith([ProgramName], "All Level") then 1 else if Text.StartsWith([ProgramName], "Elementary") then 2 else if Text.StartsWith([ProgramName], "Middle School") then 3 else if Text.StartsWith([ProgramName], "High School") then 4 else null),
    #"Changed Type3" = Table.TransformColumnTypes(#"Added Conditional Column1",{{"ProgramNameSort", Int64.Type}}),
    #"Removed Duplicates" = Table.Distinct(#"Changed Type3"),
    #"Added Custom" = Table.AddColumn(#"Removed Duplicates", "FullName", each [FirstName]&" "&[LastSurname]),
    #"Changed Type4" = Table.TransformColumnTypes(#"Added Custom",{{"FullName", type text}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type4",{{"Credentialed", "Certification Status"}})
in
    #"Renamed Columns"

--------------------------------------------------------------
--------------------------------------------------------------

---EPP
let
    Source = Sql.Database(".", "EdFi_Ods_Populated_Sandbox", [Query="---EPP#(lf)SELECT EducationOrganizationId#(lf)#(tab)#(tab),NameOfInstitution #(lf)#(tab)FROM edfi.EducationOrganization"])
in
    Source

--------------------------------------------------------------
--------------------------------------------------------------


---Race
let
    Source = Sql.Database(".", "EdFi_Ods_Populated_Sandbox", [Query="---Race Dimension#(lf)SELECT rd.RaceDescriptorId#(lf)#(tab)#(tab),d.CodeValue #(lf)#(tab)FROM [edfi].[RaceDescriptor] rd#(lf)#(tab)LEFT OUTER JOIN edfi.Descriptor d on d.DescriptorId = rd.RaceDescriptorId"]),
    #"Renamed Columns" = Table.RenameColumns(Source,{{"CodeValue", "Race"}}),
    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"RaceDescriptorId", Int64.Type}})
in
    #"Changed Type"

--------------------------------------------------------------
--------------------------------------------------------------

---Sex
let
    Source = Sql.Database(".", "EdFi_Ods_Populated_Sandbox", [Query="---Sex#(lf)SELECT S.SexDescriptorId#(lf)#(tab)#(tab), D.CodeValue #(lf)#(tab)FROM edfi.SexDescriptor S#(lf)#(tab)LEFT JOIN edfi.Descriptor d on d.DescriptorId = S.SexDescriptorId"]),
    #"Renamed Columns" = Table.RenameColumns(Source,{{"CodeValue", "Sex"}})
in
    #"Renamed Columns"

--------------------------------------------------------------
--------------------------------------------------------------
---Financial Aid
let
	Source = Sql.Database(".", "EdFi_Ods_Populated_Sandbox", [Query="---Financial Aid#(lf)SELECT a.CandidateIdentifier#(lf)#(tab)#(tab),a.BeginDate#(lf)#(tab)#(tab),a.EndDate#(lf)#(tab)#(tab),a.AidConditionDescription#(lf)#(tab)#(tab),d.CodeValue as AidType#(lf)#(tab)#(tab),a.AidAmount#(lf)#(tab)#(tab),a.PellGrantRecipient#(lf)  FROM tpdm.CandidateAid a#(lf)  LEFT OUTER JOIN edfi.Descriptor d on a.AidTypeDescriptorId = d.DescriptorId"]),
	#"Changed Type" = Table.TransformColumnTypes(Source,{{"BeginDate", type date}, {"EndDate", type date}, {"CandidateIdentifier", type number}}),
	#"Replaced Value" = Table.ReplaceValue(#"Changed Type",null,false,Replacer.ReplaceValue,{"PellGrantRecipient"})
in
    #"Replaced Value"

--------------------------------------------------------------
--------------------------------------------------------------

---EVALUATION RATING RESULT
let
    Source = Sql.Database(".", "EdFi_Ods_Populated_Sandbox", [Query="---Evaluation Rating: perfomance evaluation >> Objective >> Element#(lf)SELECT DISTINCT tc.CandidateIdentifier#(lf)#(tab)#(tab),r.EvaluationDate#(lf)#(tab)#(tab),r.PerformanceEvaluationTitle#(lf)#(tab)#(tab),eo.EvaluationObjectiveTitle#(lf)#(tab)#(tab),r.EvaluationElementTitle#(lf)#(tab)#(tab),r.RatingResultTitle#(lf)#(tab)#(tab),r.Rating#(lf)FROM [tpdm].EvaluationElementRatingResult r#(lf)JOIN tpdm.Candidate tc on r.PersonId = tc.PersonId#(lf)JOIN tpdm.EvaluationObjective eo on r.EvaluationObjectiveTitle = eo.EvaluationObjectiveTitle#(lf)ORDER BY tc.CandidateIdentifier"]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"EvaluationDate", type date}})
in
    #"Changed Type"

--------------------------------------------------------------
--------------------------------------------------------------

---FIELDWORK EXPERIENCE
let
    Source = Sql.Database(".", "EdFi_Ods_Populated_Sandbox", [Query="#(tab)---Fieldwork Experience#(lf)SELECT tc.CandidateIdentifier#(lf)#(tab)#(tab),f.BeginDate#(lf)#(tab)#(tab),f.EndDate#(lf)#(tab)#(tab),d.CodeValue AS 'Fieldwork Type'#(lf)#(tab)#(tab),f.HoursCompleted#(lf)#(tab)#(tab),eo.NameOfInstitution#(lf)FROM [tpdm].[FieldworkExperience] f#(lf)JOIN edfi.Student s on s.StudentUSI = f.StudentUSI#(lf)JOIN tpdm.Candidate tc on tc.PersonId = s.PersonId#(lf)JOIN edfi.Descriptor d on f.FieldworkTypeDescriptorId = d.DescriptorId#(lf)JOIN edfi.EducationOrganization eo on f.SchoolId = eo.EducationOrganizationId#(lf)ORDER BY tc.CandidateIdentifier"]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"BeginDate", type date}, {"EndDate", type date}})
in
    #"Changed Type"

--------------------------------------------------------------
--------------------------------------------------------------

---SURVEY
let
    Source = Sql.Database("RG-DEV-JETTEST\MSSQLSERVER01", "EdFi_Ods_Populated_Template_RW_10_20210404", [Query="---Survey#(lf)SELECT tc.CandidateIdentifier#(lf)#(tab)#(tab),s.SurveyTitle#(lf)#(tab)#(tab),sse.SurveySectionTitle#(lf)#(tab)#(tab),sr.ResponseDate#(lf)#(tab)#(tab),q.QuestionCode#(lf)#(tab)#(tab),q.QuestionText#(lf)                ,mq.NumericResponse#(lf)#(tab)#(tab),mq.TextResponse#(lf)FROM [tpdm].[SurveyResponsePersonTargetAssociation] sa#(lf)JOIN tpdm.Candidate tc on sa.PersonId = tc.PersonId#(lf)JOIN tpdm.SurveySectionExtension sse on sa.SurveyIdentifier = sse.SurveyIdentifier#(lf)JOIN edfi.Survey s on sa.SurveyIdentifier = s.SurveyIdentifier#(lf)JOIN edfi.SurveyResponse sr on sa.SurveyResponseIdentifier = sr.SurveyResponseIdentifier#(lf)JOIN edfi.SurveyQuestion q on sa.SurveyIdentifier = q.SurveyIdentifier #(lf)#(tab)and sse.SurveySectionTitle = q.SurveySectionTitle#(lf)JOIN edfi.SurveyQuestionResponseSurveyQuestionMatrixElementResponse mq on sa.SurveyResponseIdentifier = mq.SurveyResponseIdentifier#(lf)#(tab)and q.QuestionCode = mq.QuestionCode#(lf)ORDER BY tc.CandidateIdentifier, sr.ResponseDate, q.QuestionCode"]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"ResponseDate", type date}}),
    #"Added Custom3" = Table.AddColumn(#"Changed Type", "Neg.Post Count", each if [SurveySectionTitle] = "Section 4" and [NumericResponse] >= 3 then -1 else if [SurveySectionTitle] = "Section 4" and [NumericResponse] < 3 then 1 else
    if [SurveySectionTitle] = "Section 5" and [NumericResponse] >= 5 then 1 else if [SurveySectionTitle] = "Section 5" and [NumericResponse] < 5 then -1 else null),
    #"Changed Type1" = Table.TransformColumnTypes(#"Added Custom3",{{"Neg.Post Count", Int64.Type}})
in
    #"Changed Type1"

--------------------------------------------------------------
--------------------------------------------------------------

---Objective Descriptions
let
    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("bVPRjtQwDPwVq89d/gFxgJBAQhxvq3vwJU5rXZpUiVPg73Habrfb61vajGfGY+d6bT7FIPRXCnr4gkZiyk3b/O4JhND0lKBkysDBxTSgcAyAr7EIiEI8YQocusuM1QOYhQ0wWMhSLAXRWssT26pg2TlKFIxSSoRMsnFAF9HnuXD0GLQqSypmUdSfmNVHHpTwQ/PSXpvvt7qvte7gWYkzZO4COzYYpAXTo/cUOq1oYcLEZBfacUxxTIxCByuLzMdNFn6qrbNshuKFR087izBES/kuUNH66dWR6v5h6Y99axpL+RbbBnglzZ5asCXN7mdWJyq/y2hx+0S1aVA8fLvfHUzbGZQfEq4VeSRT8zpYazdHmmHSFaHEWdgs7QUimxdPW9m6BGuCOyO6AU+qkfV4+YFvij3LM4YuVhpU/L/M+sO9D0XzGvCN9k3U/VrZb8PbMTyvDLe9OVPeDdCiYBXR4TnW2b4zUDs2cRhK0A0TOnkhtxKl6FKd7Dw4fSc00X2Pf5HzdF/zZ/Lu8nlCX/BkdGkB14ygr30l6B/34OHlbWY5KNQqUjviQQ1NK2e9HOtQ2ZD6efkP", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Objective = _t, Description = _t]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Objective", type text}, {"Description", type text}})
in
    #"Changed Type"

--------------------------------------------------------------
--------------------------------------------------------------
